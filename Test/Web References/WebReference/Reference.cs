//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5485.
// 
#pragma warning disable 1591

namespace BRB.WebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BRB_SyncSoap", Namespace="http://pakko.org/")]
    public partial class BRB_Sync : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServiceVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileVersionNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectionToDbServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadCheckPricesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadPriceLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDocsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadDocsNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadDocsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadInventoryOSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadInventoryOSOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BRB_Sync() {
            this.Url = global::Test.Properties.Settings.Default.Test_WebReference_BRB_Sync;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServiceVersionCompletedEventHandler GetServiceVersionCompleted;
        
        /// <remarks/>
        public event GetFileVersionCompletedEventHandler GetFileVersionCompleted;
        
        /// <remarks/>
        public event GetFileVersionNewCompletedEventHandler GetFileVersionNewCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event TestConnectionToDbServerCompletedEventHandler TestConnectionToDbServerCompleted;
        
        /// <remarks/>
        public event LoadCheckPricesCompletedEventHandler LoadCheckPricesCompleted;
        
        /// <remarks/>
        public event UpLoadPriceLogsCompletedEventHandler UpLoadPriceLogsCompleted;
        
        /// <remarks/>
        public event LoadDocsCompletedEventHandler LoadDocsCompleted;
        
        /// <remarks/>
        public event UpLoadDocsNewCompletedEventHandler UpLoadDocsNewCompleted;
        
        /// <remarks/>
        public event UpLoadDocsCompletedEventHandler UpLoadDocsCompleted;
        
        /// <remarks/>
        public event LoadInventoryCompletedEventHandler LoadInventoryCompleted;
        
        /// <remarks/>
        public event LoadInventoryOSCompletedEventHandler LoadInventoryOSCompleted;
        
        /// <remarks/>
        public event UpLoadInventoryOSCompletedEventHandler UpLoadInventoryOSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/GetServiceVersion", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceVersion() {
            object[] results = this.Invoke("GetServiceVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync() {
            this.GetServiceVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync(object userState) {
            if ((this.GetServiceVersionOperationCompleted == null)) {
                this.GetServiceVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceVersionOperationCompleted);
            }
            this.InvokeAsync("GetServiceVersion", new object[0], this.GetServiceVersionOperationCompleted, userState);
        }
        
        private void OnGetServiceVersionOperationCompleted(object arg) {
            if ((this.GetServiceVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceVersionCompleted(this, new GetServiceVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/GetFileVersion", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileVersion() {
            object[] results = this.Invoke("GetFileVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileVersionAsync() {
            this.GetFileVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetFileVersionAsync(object userState) {
            if ((this.GetFileVersionOperationCompleted == null)) {
                this.GetFileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileVersionOperationCompleted);
            }
            this.InvokeAsync("GetFileVersion", new object[0], this.GetFileVersionOperationCompleted, userState);
        }
        
        private void OnGetFileVersionOperationCompleted(object arg) {
            if ((this.GetFileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileVersionCompleted(this, new GetFileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/GetFileVersionNew", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileVersionNew(string file) {
            object[] results = this.Invoke("GetFileVersionNew", new object[] {
                        file});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileVersionNewAsync(string file) {
            this.GetFileVersionNewAsync(file, null);
        }
        
        /// <remarks/>
        public void GetFileVersionNewAsync(string file, object userState) {
            if ((this.GetFileVersionNewOperationCompleted == null)) {
                this.GetFileVersionNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileVersionNewOperationCompleted);
            }
            this.InvokeAsync("GetFileVersionNew", new object[] {
                        file}, this.GetFileVersionNewOperationCompleted, userState);
        }
        
        private void OnGetFileVersionNewOperationCompleted(object arg) {
            if ((this.GetFileVersionNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileVersionNewCompleted(this, new GetFileVersionNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/GetFile", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFile(string file) {
            object[] results = this.Invoke("GetFile", new object[] {
                        file});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string file) {
            this.GetFileAsync(file, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string file, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        file}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/TestConnectionToDbServer", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConnectionToDbServer() {
            object[] results = this.Invoke("TestConnectionToDbServer", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionToDbServerAsync() {
            this.TestConnectionToDbServerAsync(null);
        }
        
        /// <remarks/>
        public void TestConnectionToDbServerAsync(object userState) {
            if ((this.TestConnectionToDbServerOperationCompleted == null)) {
                this.TestConnectionToDbServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionToDbServerOperationCompleted);
            }
            this.InvokeAsync("TestConnectionToDbServer", new object[0], this.TestConnectionToDbServerOperationCompleted, userState);
        }
        
        private void OnTestConnectionToDbServerOperationCompleted(object arg) {
            if ((this.TestConnectionToDbServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionToDbServerCompleted(this, new TestConnectionToDbServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/LoadCheckPrices", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadCheckPrices(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            object[] results = this.Invoke("LoadCheckPrices", new object[] {
                        dsTerm,
                        pocketName,
                        shopName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadCheckPricesAsync(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            this.LoadCheckPricesAsync(dsTerm, pocketName, shopName, null);
        }
        
        /// <remarks/>
        public void LoadCheckPricesAsync(System.Data.DataSet dsTerm, string pocketName, string shopName, object userState) {
            if ((this.LoadCheckPricesOperationCompleted == null)) {
                this.LoadCheckPricesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCheckPricesOperationCompleted);
            }
            this.InvokeAsync("LoadCheckPrices", new object[] {
                        dsTerm,
                        pocketName,
                        shopName}, this.LoadCheckPricesOperationCompleted, userState);
        }
        
        private void OnLoadCheckPricesOperationCompleted(object arg) {
            if ((this.LoadCheckPricesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCheckPricesCompleted(this, new LoadCheckPricesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/UpLoadPriceLogs", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpLoadPriceLogs(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            object[] results = this.Invoke("UpLoadPriceLogs", new object[] {
                        dsTerm,
                        pocketName,
                        shopName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpLoadPriceLogsAsync(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            this.UpLoadPriceLogsAsync(dsTerm, pocketName, shopName, null);
        }
        
        /// <remarks/>
        public void UpLoadPriceLogsAsync(System.Data.DataSet dsTerm, string pocketName, string shopName, object userState) {
            if ((this.UpLoadPriceLogsOperationCompleted == null)) {
                this.UpLoadPriceLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadPriceLogsOperationCompleted);
            }
            this.InvokeAsync("UpLoadPriceLogs", new object[] {
                        dsTerm,
                        pocketName,
                        shopName}, this.UpLoadPriceLogsOperationCompleted, userState);
        }
        
        private void OnUpLoadPriceLogsOperationCompleted(object arg) {
            if ((this.UpLoadPriceLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadPriceLogsCompleted(this, new UpLoadPriceLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/LoadDocs", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadDocs(System.Data.DataSet dsTerm, string pocket_id, string shopName, int w, int a, int u, System.DateTime date, string number_doc) {
            object[] results = this.Invoke("LoadDocs", new object[] {
                        dsTerm,
                        pocket_id,
                        shopName,
                        w,
                        a,
                        u,
                        date,
                        number_doc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDocsAsync(System.Data.DataSet dsTerm, string pocket_id, string shopName, int w, int a, int u, System.DateTime date, string number_doc) {
            this.LoadDocsAsync(dsTerm, pocket_id, shopName, w, a, u, date, number_doc, null);
        }
        
        /// <remarks/>
        public void LoadDocsAsync(System.Data.DataSet dsTerm, string pocket_id, string shopName, int w, int a, int u, System.DateTime date, string number_doc, object userState) {
            if ((this.LoadDocsOperationCompleted == null)) {
                this.LoadDocsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDocsOperationCompleted);
            }
            this.InvokeAsync("LoadDocs", new object[] {
                        dsTerm,
                        pocket_id,
                        shopName,
                        w,
                        a,
                        u,
                        date,
                        number_doc}, this.LoadDocsOperationCompleted, userState);
        }
        
        private void OnLoadDocsOperationCompleted(object arg) {
            if ((this.LoadDocsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDocsCompleted(this, new LoadDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/UpLoadDocsNew", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpLoadDocsNew(System.Data.DataSet dsTerm, string version) {
            object[] results = this.Invoke("UpLoadDocsNew", new object[] {
                        dsTerm,
                        version});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpLoadDocsNewAsync(System.Data.DataSet dsTerm, string version) {
            this.UpLoadDocsNewAsync(dsTerm, version, null);
        }
        
        /// <remarks/>
        public void UpLoadDocsNewAsync(System.Data.DataSet dsTerm, string version, object userState) {
            if ((this.UpLoadDocsNewOperationCompleted == null)) {
                this.UpLoadDocsNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadDocsNewOperationCompleted);
            }
            this.InvokeAsync("UpLoadDocsNew", new object[] {
                        dsTerm,
                        version}, this.UpLoadDocsNewOperationCompleted, userState);
        }
        
        private void OnUpLoadDocsNewOperationCompleted(object arg) {
            if ((this.UpLoadDocsNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadDocsNewCompleted(this, new UpLoadDocsNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/UpLoadDocs", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpLoadDocs(System.Data.DataSet dsTerm) {
            object[] results = this.Invoke("UpLoadDocs", new object[] {
                        dsTerm});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpLoadDocsAsync(System.Data.DataSet dsTerm) {
            this.UpLoadDocsAsync(dsTerm, null);
        }
        
        /// <remarks/>
        public void UpLoadDocsAsync(System.Data.DataSet dsTerm, object userState) {
            if ((this.UpLoadDocsOperationCompleted == null)) {
                this.UpLoadDocsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadDocsOperationCompleted);
            }
            this.InvokeAsync("UpLoadDocs", new object[] {
                        dsTerm}, this.UpLoadDocsOperationCompleted, userState);
        }
        
        private void OnUpLoadDocsOperationCompleted(object arg) {
            if ((this.UpLoadDocsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadDocsCompleted(this, new UpLoadDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/LoadInventory", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadInventory(string pocket_id, string shopName, string number_doc) {
            object[] results = this.Invoke("LoadInventory", new object[] {
                        pocket_id,
                        shopName,
                        number_doc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadInventoryAsync(string pocket_id, string shopName, string number_doc) {
            this.LoadInventoryAsync(pocket_id, shopName, number_doc, null);
        }
        
        /// <remarks/>
        public void LoadInventoryAsync(string pocket_id, string shopName, string number_doc, object userState) {
            if ((this.LoadInventoryOperationCompleted == null)) {
                this.LoadInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadInventoryOperationCompleted);
            }
            this.InvokeAsync("LoadInventory", new object[] {
                        pocket_id,
                        shopName,
                        number_doc}, this.LoadInventoryOperationCompleted, userState);
        }
        
        private void OnLoadInventoryOperationCompleted(object arg) {
            if ((this.LoadInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadInventoryCompleted(this, new LoadInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/LoadInventoryOS", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadInventoryOS(System.Data.DataSet dsTerm, string pocketName) {
            object[] results = this.Invoke("LoadInventoryOS", new object[] {
                        dsTerm,
                        pocketName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadInventoryOSAsync(System.Data.DataSet dsTerm, string pocketName) {
            this.LoadInventoryOSAsync(dsTerm, pocketName, null);
        }
        
        /// <remarks/>
        public void LoadInventoryOSAsync(System.Data.DataSet dsTerm, string pocketName, object userState) {
            if ((this.LoadInventoryOSOperationCompleted == null)) {
                this.LoadInventoryOSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadInventoryOSOperationCompleted);
            }
            this.InvokeAsync("LoadInventoryOS", new object[] {
                        dsTerm,
                        pocketName}, this.LoadInventoryOSOperationCompleted, userState);
        }
        
        private void OnLoadInventoryOSOperationCompleted(object arg) {
            if ((this.LoadInventoryOSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadInventoryOSCompleted(this, new LoadInventoryOSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://pakko.org/UpLoadInventoryOS", RequestNamespace="http://pakko.org/", ResponseNamespace="http://pakko.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpLoadInventoryOS(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            object[] results = this.Invoke("UpLoadInventoryOS", new object[] {
                        dsTerm,
                        pocketName,
                        shopName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpLoadInventoryOSAsync(System.Data.DataSet dsTerm, string pocketName, string shopName) {
            this.UpLoadInventoryOSAsync(dsTerm, pocketName, shopName, null);
        }
        
        /// <remarks/>
        public void UpLoadInventoryOSAsync(System.Data.DataSet dsTerm, string pocketName, string shopName, object userState) {
            if ((this.UpLoadInventoryOSOperationCompleted == null)) {
                this.UpLoadInventoryOSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadInventoryOSOperationCompleted);
            }
            this.InvokeAsync("UpLoadInventoryOS", new object[] {
                        dsTerm,
                        pocketName,
                        shopName}, this.UpLoadInventoryOSOperationCompleted, userState);
        }
        
        private void OnUpLoadInventoryOSOperationCompleted(object arg) {
            if ((this.UpLoadInventoryOSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadInventoryOSCompleted(this, new UpLoadInventoryOSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetServiceVersionCompletedEventHandler(object sender, GetServiceVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetFileVersionCompletedEventHandler(object sender, GetFileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetFileVersionNewCompletedEventHandler(object sender, GetFileVersionNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileVersionNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileVersionNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void TestConnectionToDbServerCompletedEventHandler(object sender, TestConnectionToDbServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionToDbServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionToDbServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void LoadCheckPricesCompletedEventHandler(object sender, LoadCheckPricesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCheckPricesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCheckPricesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void UpLoadPriceLogsCompletedEventHandler(object sender, UpLoadPriceLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpLoadPriceLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpLoadPriceLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void LoadDocsCompletedEventHandler(object sender, LoadDocsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDocsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDocsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void UpLoadDocsNewCompletedEventHandler(object sender, UpLoadDocsNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpLoadDocsNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpLoadDocsNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void UpLoadDocsCompletedEventHandler(object sender, UpLoadDocsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpLoadDocsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpLoadDocsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void LoadInventoryCompletedEventHandler(object sender, LoadInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void LoadInventoryOSCompletedEventHandler(object sender, LoadInventoryOSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadInventoryOSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadInventoryOSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    public delegate void UpLoadInventoryOSCompletedEventHandler(object sender, UpLoadInventoryOSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpLoadInventoryOSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpLoadInventoryOSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591